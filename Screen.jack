// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	
	static int base;
	static boolean black;
	static Array power_array;

    /** Initializes the Screen. */
    function void init() {
		var int i, temp;
		let base = 16384;
		let black = true;
		
		// init power_array
		let power_array = Array.new(16);
        let power_array[0] = 1;

        let i = 1;
        while (i < 16) {
			let temp = power_array[i-1];
            let power_array[i] = temp + temp;
            let i = i + 1;
        }
		
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int index;
		let index = base;
		
		while(index < 24577){
			do Memory.poke(index, 0);
			let index = index + 1;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let black = b;
		return;
    }
	
	function int power(int n){
		return power_array[n];
	}

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int addr, value, mask;
		let addr = (32*y) + (x/16);
		let value = Memory.peek(base + addr);
		let mask = Screen.power(x & 15);
		if (black){
			let value = value | mask;
		}
		else{
			let value = value & ~mask;
		}
		do Memory.poke(base + addr, value);
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		//4 options for line: horizonal, vertical, 2 diagonals
		 
		//horizontal
		var int addr, tmp;
		var int dx, dy;

		if (y1 = y2){
			
			if (x1 > x2){
				let tmp = x1;
				let x1 = x2;
				let x2 = tmp;
			}
			
			while (~(x1 > x2)){ // while x1 <= x2
			
				if ((x1 & 15 = 0) & (~(x1 + 16 > x2 ))){
					
					let addr = (y1*32) + (x1/16);
					
					if (black){
						do Memory.poke(base + addr, -1);
						let x1 = x1+16;
					}
					else{
						do Memory.poke(base + addr, 0);
						let x1 = x1+16;
					}
				}
				else {
					do Screen.drawPixel(x1,y1);
					let x1= x1 +1;
				}
			}
			return;
		}
		//vertical
		if (x1 = x2){
			
			if (y1 > y2){
				let tmp = y1;
				let y1 = y2;
				let y2 = tmp;
			}
			
			while (~(y2 < y1)){
				do Screen.drawPixel(x1, y1);
				let y1 = y1 + 1;
			}
			return;
		}
		
		let dx = Math.abs(x2 - x1);
		let dy = Math.abs(y2 - y1);
		
		//diagonal 1
		if(((x1 > x2) & (y1 > y2)) | ((x1 < x2) & (y1 < y2))){
			if (x1 > x2){
				let tmp = x1;
				let x1 = x2;
				let x2 = tmp;
				let tmp = y1;
				let y1 = y2;
				let y2 = tmp;
			}
			do Screen.diagonal_1(x1, y1, x2, y2, dx, dy);
            return;
        }
			
		//diaginal 2
        else{
            if(x1 > x2){
				let tmp = x1;
				let x1 = x2;
				let x2 = tmp;
				let tmp = y1;
				let y1 = y2;
				let y2 = tmp;
			}
			
            do Screen.diagonal_2(x1, y1, x2, y2, dx, dy);
            return;
        }	
    }
	
	function void diagonal_1(int x1,int y1,int x2,int y2, int dx, int dy) {
        var int a, b, diff;

        let a = 0;
        let b = 0;
        let diff = 0;
		
        while ((~(a > dx)) & (~(b > dy))) {       // while a <= dx and b <= dy
            do Screen.drawPixel(x1 + a, y1 + b);
            
			if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            }
            else{
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }
	
	 function void diagonal_2(int x1,int y1,int x2,int y2, int dx, int dy) {
        var int a, b, diff;

        let a = 0;
        let b = 0;
        let diff = 0;
		
        while ((~(a > dx)) & (~(b > dy))) {       // while a <= dx and b <= dy
            do Screen.drawPixel(x1 + a, y1 - b);
            
			if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            }
            else{
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }
    

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int current_y;
		let current_y = y1;
		while(current_y < (y2 + 1)){
			do Screen.drawLine(x1, current_y, x2, current_y);
			let current_y = current_y + 1;
		}
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int dx, dy;
		let dy = -r;
		
		while(~(dy > r)){
			let dx = Math.sqrt((r*r) - (dy*dy));
			do Screen.drawLine((x-dx), (y+dy), (x+dx), (y+dy));
			let dy = dy + 1;
		}
		return;
    }
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	
	static Array ram, free_list;
	static int heap_base, length, next;

    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let heap_base = 2048;
		let free_list = heap_base;
		let length = 0;
		let next = 1;
		
		let free_list[length] = 16384 - heap_base;   // heap size
		let free_list[next] = null;
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		
		var Array segment, current, previous;
		
		if(size < 1){
			return null;
		} 
		
		let segment = null;
		
		if((free_list[next] = null) | ((free_list[length] - 2) > size)){  // there is space in free_list
			
			if((free_list[length] - 2) > size ){
				
				if ((free_list[length] - 3) = size){
					let segment = heap_base + 3;
					let free_list[length] = 2;
					let segment[-1] = size;
				}
				else {
					let segment = heap_base + free_list[length] - size;
					let free_list[length] = free_list[length] - (size + 1);
					let segment[-1] = size;
				}
			}
			return segment;
		}
		
		let current = free_list[next];
		let previous = free_list;
		
		while((~(current = null)) & ((segment = null))){
			
			if(current[length] > size){
				
				if(current[length] = size + 1){
					let segment = previous[next] + 1;
					let previous[next] = current[next];
					let segment[-1] = size;
				}
				else{
					let segment = previous[next] + (current[length] - size);
					let current[length] = current[length] - (size + 1);
					let segment[-1] = size;
				}
			}
			else{
				let current = current[next];
				let previous = current;
			}
		}
		return segment;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		var Array segment, previous;
		
		let previous = free_list;
		
		while((~(previous[next] = null)) & (previous[next] < o)){
			let previous = previous[next];
		}

		if((previous + previous[length]) = (o - 1)){              
			
			let previous[length] = previous[length] + o[-1] + 1;
			
			if(previous + previous[length] = previous[next]){     // object is between two free segments
				
				let segment = previous[next];
				let previous[length] = previous[length] + segment[length];
				let previous[next] = segment[next];
			}
		}
		else {                                                     // object is between two allocated segments
			let segment = o - 1 ;
			let segment[length] = o[-1] + 1;
			let segment[next] = previous[next];                    // insert the free segment to the Linked List
			let previous[next] = segment;
			
			if((segment + segment[length]) = segment[next]){
				let o = segment[next];
				let segment[length] = segment[length] + o[length];
				let segment[next] = o[next];
			}
		}
		return;
    }      
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
		//check if the instruction is A or C
		And(a=instruction[15], b=true, out=isC);
		Not(in=isC, out=isA);


		//check where to store
		And(instruction[3], b=inC, out=writeM);
		And(instruction[4], b=inC, out=inD);
		And(instruction[5], b=inC, out=inA);

		Register(in=oALU, load=inD, out=outD);

    	Mux16(a=oALU, b=inM, sel=isA, out=registerA);
		Or(a=isA, b=inA, out=ifStoreInA);
		Register(in=registerA, load=ifStroreInA, out=outA, out[0..14]=addressM);

		//check jumps
		And(a=zr, b=true out=jeq);
		Not(in=zero, out=jne);
		And(a=ng, b=true, out=jlt);
		Not(in=jlt, out=jgt);
		Or(a=jgt, b=zr, out=jge);
		Or(a=jlt, b=zr, out=jle);
		Not(in=true, out=nojmp);
		Not(in=false, out=jmp);

		Mux8Way(a=jeq, b=jne, c=jlt, d=jgt, e=jge, f=jle, g=n0jmp, h=jmp, 
										sel=instruction[0..2], out=isjmp);
		And(a=isC, b=isjmp, out=jump);

		//if C-instruction, we will check the a bit, if a=1 then M will be 
		// the ALU's input, else Register A will be.
		And(a=instruction[12], b=true, out=isM);

		Mux16(a=registerA, b=inM, load=isM, out=inALU);

		ALU(a=inALU, b=outD, zx=instruction[11], nx=instruction[10], 
				zy=instruction[9], ny=instruction[8], f=instruction[7], 
								no=instruction[6], zr=zr, ng=ng, out=oALU);

		Or16 (a=false, b=oALU, out=outM);
		PC(in=outA, load=jump, inc=true, reset=reset, out[0..14]=pc);



}

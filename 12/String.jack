// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	
	field Array string_obj;
	field int max_length;
	field int len;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if(maxLength < 1){
			let max_length = 1;
		}
		else{
			let max_length = maxLength;
		}
		
		//create the new string
		let string_obj = Array.new(max_length);
		let len = 0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do string_obj.dispose();
		do Memory.deAlloc(this);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		if (j < len){
			return string_obj[j];
		}
		else{
			return 0;
		}
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		if (j < len){
			let string_obj[j] = c;
			return;
		}
		else{
			return;
		}
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		if (len < max_length){
			let string_obj[len] = c;
			let len = len + 1;
		}
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		let len = len - 1;
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var boolean is_negative;
		var int index, digit, result;
		
		let index = 0;
		let result = 0;
		let is_negative = false;
		
		while(index < len){
			let digit = string_obj[index];
			if(digit = 45){                 // 45 is minus char
				let is_negative = true;
			}
			else{
				let result = (result * 10) + (digit - 48);  // 48 is zero char
			}
			let index = index + 1;
		}
		if(is_negative){
			return -result;
		}
		else{
			return result;
		}
    }

	method void recursive_call(int val){
		var int last_digit;
		var int char_to_append;
		
		let last_digit = val - ((val /10) * 10);
		let char_to_append = last_digit + 48;
		
		if(val < 10){
			do appendChar(val + 48);
		}
		else{
			do recursive_call(val / 10);
			do appendChar(char_to_append);
		}
		return;
	}


    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		let len = 0;
		
		if(val < 0){
			do appendChar(45);
			do recursive_call(-val);
		}
		else{
			do recursive_call(val);
		}
		return;
    }


    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}

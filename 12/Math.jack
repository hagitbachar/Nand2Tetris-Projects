// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	
	static int global_2qy;
	static Array power_array;

    /** Initializes the library. */
    function void init() {
		var int i, temp;
		let power_array = Array.new(16);
        let power_array[0] = 1;

        let i = 1;
        while (i < 16) {
			let temp = power_array[i-1];
            let power_array[i] = temp + temp;
            let i = i + 1;
        }
		
		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if(x < 0){
			return -x;
		}
		return x;
    }
	
	
	function boolean bit(int n, int i){
		var int b;
		var int power_i;
		
		let power_i = power_array[i];
		let b = n & power_i;
		
		if (b > 0){
			return true;
		}
		return false;
	}
	

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		var int result, shift, index;
        let index = 0;
		let result = 0;
        let shift = x;
		
		if (x = 1){
			return y;
		}
		if (y = 1){
			return x;
		}
		
        while (index < 16) {
            if (Math.bit(y,index)) {
                let result = result + shift;
            }
            let shift = shift + shift;
            let index = index + 1;
        }
        return result;

    }
	
	
	function int divide_helper(int x, int y){
		var int q;
		
		if ((y < 0) | (x < y)){
			return 0;
		}
		
		let q = Math.divide_helper(x, y + y);
		
		if ((x - global_2qy) < y) {
			return q + q;
		}
		else {
			let global_2qy  = global_2qy + y;
			return q + q +1;
		}
	}


    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		var int q, result;
		var boolean sign_x, sign_y;
		
		let global_2qy = 0;
		
		let result = Math.divide_helper(Math.abs(x), Math.abs(y));
		
		//return result with the original sign
		
		let sign_x = (x > 0);
		let sign_y = (y > 0);
		
		if (sign_x = sign_y){
			return result;
		}
		else{
			return - result;
		}
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y, med, med_squared, j;
		let j = 7;
		let y = 0;
		
		while (~ (j < 0)){
			let med = y + power_array[j];
			let med_squared = med * med;
			
			if((med_squared > 0) & (~(med_squared > x))){
				let y = med;
			}
			let j = j - 1;
		}
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if (a > b){
			return a;
		}
		return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if (a < b){
			return a;
		}
		return b;
    }
}
